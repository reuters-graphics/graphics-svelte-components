---
title: HybridMap
description: Combine the power of d3 maps with ai2svelte basemaps
slug: hybrid-map
---

<script>
  import HybridMap from './index.svelte';
  import DemoContainer from '../_docs/DemoContainer/index.svelte';
  import { fade } from 'svelte/transition';
  import aiBasemap from './demo/aiBasemap.exclude.svelte';
  import d3Map from './demo/d3Map.exclude.svelte';

  import anno from './demo/d3-map-hillshaded-aoc-mar23.exclude.svelte'
  import labels from './demo/d3-map-hillshaded-labels.exclude.svelte'

  const qgisExtents = [19.9754, 43.5692, 42.1681, 53.1777];

</script>

<style>
  section.aiMapLayer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    max-width: inherit;
  }
</style>


<section>

## {title}

{description}

  This component allows dynamic maps in graphics projects with basemaps designed in QGIS and Illustrator with a data layer added on top using a D3 map.

</section>

```svelte
<script>
  import { HybridMap } from '@reuters-graphics/graphics-svelte-components';
  import aiBasemap from '$lib/ai2svelte/aiBasemap.svelte';
  import d3Map from '$lib/components/d3Map/index.svelte';

  const qgisExtents = [19.9754, 43.5692, 42.1681, 53.1777];
</script>

<HybridMap qgisExtents={qgisExtents} aiBasemap={aiBasemap} d3Map={d3Map}/>
```

<DemoContainer>
  <HybridMap 
  qgisExtents = {qgisExtents}
  aiBasemap = {aiBasemap}
  d3Map = {d3Map}
  />

  <section>

  `hillshaded basemap` from Ai2svelte, `brown borders` from D3 map

  `cyan box` shows the map extent that aligns the two maps 

  </section>

</DemoContainer>


<section>

## Setting up the project

This component doesn't include any data or map files. If you would like to know more about D3 maps, check out the [D3 maps collection](https://observablehq.com/@deaxmachina/collection-of-maps).

```Tested only with Mercator projection```

##### Making the QGIS map

- Make your *basemap* as you normally would using Natural Earth layers and other data layers that would be constant in the project.

- Adjust the map view to the extent you want to display on the page. This will define the `qgisExtents` property for the D3 map. You can note the map extents from the bottom panel in QGIS which show up as *x1, y1, x2, y2*.

- Export the map to Illusrtator for styling. Make sure to create a clipping mask and resize the artboards' height to match the map extent. This will define the `aiBasemap` property for the Ai2svelte map.


##### Making the D3 map

- Make a new component for the *D3 map*. This component will be the `d3Map` property of the `HybridMap` component. 

- It is a good idea to export the map borders from QGIS as a topojson and use that in code to ensure that the ai2svelte aligns perfectly with the D3 map.

- The component automatically generates a rectangular bounding box for the d3Map with the `qgisExtents` property. 

Below is a sample map `draw` function – Ideally this will be a reusable chart class that you can import in `Map.svelte`
```js
  function drawMap(container, props, data) {
    // Projection
    const geoProjection = d3.geoMercator().fitWidth(props.width, props.extents);

    const bounds = d3.geoPath(geoProjection).bounds(props.extents);

    const height = Math.round(bounds[1][1]);

    // Path generator for the projection
    const geoPathGenerator = d3.geoPath().projection(geoProjection);

    const svg = d3
      .select(container)
      .appendSelect('svg.d3-map')
      .attr('class', 'd3-map')
      .attr('width', props.width)
      .attr('height', height);

    svg
      .appendSelect('path#bbox')
      .attr('id', 'bbox')
      .attr('d', geoPathGenerator(props.extents))
      .style('fill', 'none')
      .style('stroke', '#00FFFF')
      .style('stroke-width', 1);

    svg
      .appendSelect('path#land')
      .attr('id', 'land')
      .attr('d', geoPathGenerator(data))
      .style('fill', 'none')
      .style('stroke', '#964B00')
      .style('stroke-width', 1);
  }

```
Sample code for `Map.svelte` –
Notice the use of `loading` and `bbox` props
```svelte
<script>
  import { geoMercator, geoPath, selection, select } from 'd3';
  import { appendSelect } from 'd3-appendselect';
  import { feature } from 'topojson-client';
  import { onMount } from 'svelte';

  const d3 = Object.assign({}, { select, selection }, { geoMercator, geoPath });
  d3.selection.prototype.appendSelect = appendSelect;

  export let bbox;
  export let loading = true;

  let chartData;

  onMount(async () => {
    // fetch data
    try {
      const world = await Promise.all(
        ['https://cdn.jsdelivr.net/npm/world-atlas@2/countries-10m.json'].map(
          (url) => fetch(url).then((res) => res.json())
        )
      );

      chartData = feature(world[0], world[0].objects.countries);
      loading = false;
    } catch (error) {
      console.log('Error', error);
    }
  });

  let mapContainer, containerWidth;

  function drawMap(container, props, data) {
    ...
  }

  $: props = {
    extents: bbox,
    width: containerWidth,
  };

  $: {
    if (mapContainer) {
      drawMap(mapContainer, props, chartData);
    }
  }
</script>

<div bind:this="{mapContainer}" bind:clientWidth="{containerWidth}"></div>


```



##### Marrying the maps

The D3 map defines the *geoProjection* based on the `qgisExtents` and the *graphic-width*. This in turn sets the height of the SVG/Canvas map.

- Use the aspect ratio of the D3 map to fine-tune the aspect ratio of the Illustrator artboards. This should take care of those 1px misalignments.

- For mobile versions, it would show the whole map, in a smaller size. You can crop the map using code on the *md* artboard, or use a different `qgisExtents` for the mobile version.

</section>


<div class='w-100 py-5'></div>

<section>

## Customising the map

##### Adding labels and annotation layers

- Any labels or layers generated in code can be a part of the `d3Map` component

- Any ai2svelte layers can be added using slots to the `HybridMap` component

</section>

```svelte
<script>
  import { HybridMap } from '@reuters-graphics/graphics-svelte-components';
  import aiBasemap from '$lib/ai2svelte/aiBasemap.svelte';
  import d3Map from '$lib/components/d3Map/index.svelte';
  
  import anno from '$lib/ai2svelte/d3-map-hillshaded-aoc-mar23.svelte'
  import labels from '$lib/ai2svelte/d3-map-hillshaded-labels.svelte'

  const qgisExtents = [19.9754, 43.5692, 42.1681, 53.1777];
</script>

<HybridMap qgisExtents = {qgisExtents} aiBasemap = {aiBasemap} d3Map = {d3Map}>
  <div slot="aiMapLayers">
    <section class="aiMapLayer" style="z-index:100">
      <svelte:component this="{labels}" />
    </section>
    <section class="aiMapLayer">
      <svelte:component this="{anno}" />
    </section>
  </div>
</HybridMap>

<style>
  section.aiMapLayer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    max-width: inherit;
  }
</style>
```

<DemoContainer>
  <HybridMap qgisExtents = {qgisExtents} aiBasemap = {aiBasemap} d3Map = {d3Map}>
  
  <div slot="aiMapLayers">
    <section class="aiMapLayer" style="z-index:100">
      <svelte:component this="{labels}" />
    </section>
    <section class="aiMapLayer">
      <svelte:component this="{anno}" />
    </section>
  </div>

  </HybridMap>

  <section>

  `labels` layer is added to be always on top. `anno` layers can be added and can be changed with ease by changing the content of the `aiMapLayers` slot.

  </section>

</DemoContainer>


<section>

##### Loading animation

- Loading is shown by default. Check the `Map.svelte` code for how to wire it up.

- You can change the message shown by changing `showLoader`. It can be styled using CSS.

```js
showLoader="Fetching the data...";
```

</section>

<DemoContainer>
  <HybridMap qgisExtents = {qgisExtents} aiBasemap = {aiBasemap} d3Map = {d3Map} loaderMessage="Fetching the data...">
  
  <div slot="aiMapLayers">
    <section class="aiMapLayer" style="z-index:100">
      <svelte:component this="{labels}" />
    </section>
    <section class="aiMapLayer">
      <svelte:component this="{anno}" />
    </section>
  </div>

  </HybridMap>
</DemoContainer>


<section>

##### True fluid scaling for the map

In some cases you might need the map to best fit the screen (e.g. for scrolly) based on the aspect ratio so that it doesn't get cropped verticaly. 

For this you can use the props - `artboardAspect` and `customMaxWidth`

```js
  artboardAspect = 1.75;
  customMaxWidth = true;
```

</section>

<DemoContainer>
  <HybridMap 
  qgisExtents = {qgisExtents} 
  aiBasemap = {aiBasemap} 
  d3Map = {d3Map} 
  loaderMessage="Fetching the data..."
  artboardAspect = 1.75
  customMaxWidth = true
  >
  
  <div slot="aiMapLayers">
    <section class="aiMapLayer" style="z-index:100">
      <svelte:component this="{labels}" />
    </section>
    <section class="aiMapLayer">
      <svelte:component this="{anno}" />
    </section>
  </div>

  </HybridMap>
</DemoContainer>