---
title: Scroller
description: Easy scrolly-telling with layout options.
slug: scroller
---

<script>
  import DemoContainer from '../_docs/DemoContainer/index.svelte';
  import Scroller from './index.svelte';
  import Clicker from './demos/basic/_Clicker.svelte';

  import BasicStep from './demos/basic/_Step.svelte';
  import { assets } from '$app/paths';

  const basicSteps = [
    { background: BasicStep, backgroundProps: { colour: 'red' }, foreground: '#### Step 1\n\nLorem ipsum red' },
    { background: BasicStep, backgroundProps: { colour: 'blue' }, foreground: '#### Step 2\n\nLorem ipsum blue' },
    { background: BasicStep, backgroundProps: { colour: 'green' }, foreground: '#### Step 3\n\nLorem ipsum green' },
  ];

  const basicStepsComponent = [
    { background: BasicStep, backgroundProps: { colour: 'red' }, foreground: Clicker },
    { background: BasicStep, backgroundProps: { colour: 'blue' }, foreground: '#### Step 2\n\nLorem ipsum blue' },
    { background: BasicStep, backgroundProps: { colour: 'green' }, foreground: Clicker, foregroundProps: { count: 100 } },
  ];

  const ai2svelteSteps = [
    { background: 'ai-scroller-1', backgroundProps: { assets }, foreground: '#### Step 1\n\nLorem ipsum' },
    { background: 'ai-scroller-2', backgroundProps: { assets }, foreground: '#### Step 2\n\nLorem ipsum' },
    { background: 'ai-scroller-3', backgroundProps: { assets }, foreground: '#### Step 3\n\nLorem ipsum' },
  ];

  const fetchComponent = async(componentName) => {
    return (await import(`./demos/ai2html/${componentName}.exclude.svelte`)).default
  };

  const makeSteps = async(steps) => {
    const scrollerSteps = [];
    for (const step of steps) {
      const background = await fetchComponent(step.background);
      scrollerSteps.push({ ...step, ...{ background }});
    }
    return scrollerSteps;
  }

</script>

<section>

## {title}

Easy scrolly-telling with layout options, based on [svelte-scroller](https://github.com/sveltejs/svelte-scroller).

`steps` _an array of objects_

- `background` A background component **REQUIRED**
- `backgroundProps` An object of props given to background component
- `foreground` Either a markdown string or a foreground component **REQUIRED**
- `foregroundProps` An object of props given to foreground component

`backgroundSize`

- Adjusts the size of the background graphic by passing a class name corresponding to one of our well widths: `normal`, `wide`, `wider`, `widest` or `fluid`.

</section>

```svelte
<script>
  import { Scroller } from '@reuters-graphics/graphics-svelte-components';
  import RedGraphic from './RedGraphic.svelte';
  import BlueGraphic from './BlueGraphic.svelte';
  import GreenGraphic from './GreenGraphic.svelte';

  const steps = [
    {
      background: RedGraphic,
      foreground: '#### Step 1\n\nLorem ipsum red',
    },
    {
      background: BlueGraphic,
      foreground: '#### Step 2\n\nLorem ipsum blue',
    },
    {
      background: GreenGraphic,
      foreground: '#### Step 3\n\nLorem ipsum green',
    },
  ];

  const backgroundSize = 'wide';
</script>

<Scroller steps="{steps}" backgroundSize="{backgroundSize}" embedded="{embedded}"/>
```

<DemoContainer fluid={true}>
  <Scroller
    steps={basicSteps}
    backgroundSize="wide"
    id='example1'
  />
</DemoContainer>

<section>

Control the layout of your component with the `foregroundPosition` prop.

`foregroundPosition`

- `middle` Text and graphic middle _default_
- `left` Text to left, graphic stays middle
- `right` Text to right, graphic stays middle
- `left opposite` Text to left, graphic to right
- `right opposite` Text to right, graphic to left

Both text and graphic will revert to the middle when the window drops below 1200px.

**Note:** Make sure your `backgroundSize` prop is _not_ set to `fluid` if using either left or right opposite option.

</section>

```svelte
<script>
  import { Scroller } from '@reuters-graphics/graphics-svelte-components';
  import RedGraphic from './RedGraphic.svelte';
  import BlueGraphic from './BlueGraphic.svelte';
  import GreenGraphic from './GreenGraphic.svelte';

  const steps = [
    {
      background: RedGraphic,
      foreground: '#### Step 1\n\nLorem ipsum',
    },
    {
      background: BlueGraphic,
      foreground: '#### Step 2\n\nLorem ipsum',
    },
    {
      background: GreenGraphic,
      foreground: '#### Step 3\n\nLorem ipsum',
    },
  ];
</script>

<Scroller
  steps="{steps}"
  foregroundPosition="right opposite"
  backgroundSize="normal"
  embedded=false
/>
```

<DemoContainer fluid={true}>
  <Scroller
    steps={basicSteps}
    foregroundPosition='right opposite'
    backgroundSize='normal'
    id='example2'
    
  />
</DemoContainer>

<section>

Pass a component to `foreground` and use `backgroundProps` and `foregroundProps` to pass data to your components.

</section>

```svelte
<script>
  import { Scroller } from '@reuters-graphics/graphics-svelte-components';
  import MultiColourGraphic from './MultiColourGraphic.svelte';
  import InteractiveText from './InteractiveText.svelte';

  const steps = [
    {
      background: MultiColourGraphic,
      backgroundProps: { colour: 'red' }, // ðŸ‘ˆ
      foreground: InteractiveText, // ðŸ‘ˆ
    },
    {
      background: MultiColourGraphic,
      backgroundProps: { colour: 'blue' },
      foreground: '#### Step 2\n\nLorem ipsum blue',
    },
    {
      background: MultiColourGraphic,
      backgroundProps: { colour: 'green' },
      foreground: InteractiveText,
      foregroundProps: { count: 100 }, // ðŸ‘ˆ
    },
  ];
</script>

<Scroller steps="{steps}" backgroundSize="widest" embedded=false/>
```

<DemoContainer fluid={true}>
  <Scroller
    steps={basicStepsComponent}
    backgroundSize="widest"
    id='example3'
    
  />
</DemoContainer>

<section>

Add an ID to your scroller and use SCSS `:global` rules to override any styles.

</section>

```svelte
<Scroller steps="{steps}" backgroundSize="widest" id="my-scroller" />

<!-- svelte-ignore css-unused-selector -->
<style lang="scss">
  // ðŸ‘‡ Go global!
  :global {
    #my-scroller {
      .step-foreground {
        max-width: 400px;
        background-color: #333;
        h4,
        p {
          color: white;
        }
      }
    }
  }
</style>
```

<DemoContainer fluid={true}>
  <Scroller
    steps={basicSteps}
    backgroundSize="widest"
    id='scroller-example-4'
    
  />
</DemoContainer>

<section>

You can also use this component to layout an AI graphics scroller via an [ArchieML](http://archieml.org/)-formatted Google doc by using the following pattern to dynamically import [ai2svelte](https://github.com/reuters-graphics/ai2svelte) components for the background:

</section>

```bash
# In your Google doc...
[blocks]

# ...
Type: ai-scroller
ID: my-scroller
BackgroundSize: fluid
ForegroundPosition: middle

[.steps]
Background: ai-scroller-1
Foreground: \#\#\#\# Step 1

Lorem ipsum...
:end

Background: ai-scroller-2
Foreground: \#\#\#\# Step 2

Lorem ipsum...
:end

Background: ai-scroller-3
Foreground: \#\#\#\# Step 3

Lorem ipsum...
:end

[]

[]
```

```svelte
<!-- src/lib/Page.svelte -->
<script>
  import { assets } from '$app/paths';
  import content from '$locales/en/content.json';
  import { Scroller } from '@reuters-graphics/graphics-svelte-components';

  const fetchComponent = async (componentName) => {
    return (await import(`./ai2html/${componentName}.svelte`)).default;
  };

  const makeSteps = async (steps) => {
    const scrollerSteps = [];
    for (const step of steps) {
      const background = await fetchComponent(step.Background);
      scrollerSteps.push({
        background,
        backgroundProps: { assets },
        foreground: step.Foreground,
      });
    }
    return scrollerSteps;
  };
</script>

{#each content.blocks as block}
  {#if block.Type === 'ai-scroller'}
    {#await makeSteps(block.steps)}
      <div></div>
    {:then steps}
      <Scroller
        steps="{steps}"
        backgroundSize="{block.BackgroundSize}"
        foregroundPosition="{block.ForegroundPosition}"
        id="{block.ID}"
      />
    {:catch error}
      {console.error('Error making steps for scroller', error)}
    {/await}
  {/if}
{/each}
```

<section>

This pattern comes with some restrictions, though. Be sure your `fetchComponent` function follows [the limits on dynamic imports](https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#limitations).

</section>

<DemoContainer fluid={true}>
  {#await makeSteps(ai2svelteSteps) then steps}
    <Scroller
      steps={steps}
      backgroundSize="fluid"
      id='example-5'
      
    />
  {/await}
</DemoContainer>

<section>

This component also automatically creates a stacked, embed version of the scroll section. The text goes on top of the graphic by default.
</section>

<DemoContainer fluid={true}>
  {#await makeSteps(ai2svelteSteps) then steps}
    <Scroller
      steps={steps}
      backgroundSize="wide"
      id='example1'
      embedded=true
    />
  {/await}
</DemoContainer>



<style lang="scss">
  :global {
    li {
      margin-bottom: 2px;
    }
    #scroller-example-4 {
      .step-foreground{
        max-width: 400px;
        background-color: #333;
        h4, p {
          color: white;
        }
      }
    }
  }
</style>
